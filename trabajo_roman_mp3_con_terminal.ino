#include <Keypad.h> //Libreria del teclado

int pinred = 13; // pin Rojo 
int pingreen = 10; // pin Verde 
int pinblue = 9; // pin Azul 
int tonePin = 3; //mostramos el numero del pin del altavoz
const byte ROWS = 4; //fila
const byte COLS = 4; //columna
char keys[ROWS][COLS] = { //teclado
 {'1','2','3','A'},
 {'4','5','6','B'},
 {'7','8','9','C'},
 {'0','E','F','D'}
};
byte rowPins[ROWS] = {12,11,8,7}; //Filas(pines del 7,8 y 12, 13)
byte colPins[COLS] = {6,5,4,2}; //Columnas (pines del 2, 4 al 6)
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

void setup() 
{
  pinMode(pinred, OUTPUT); // pone el pinLedR como salida
  pinMode(pingreen, OUTPUT); // pone el pinLedV como salida
  pinMode(pinblue, OUTPUT); // pone el pinLedA como salida

  analogWrite(pingreen,255); //juego de luces para inicializar mp3
  delay(250);
  analogWrite(pingreen,0);
  delay(250);
  analogWrite(pingreen,255);
  delay(250);
  analogWrite(pingreen,0);

  Serial.begin (9600); //inicializo consola serial 
  Serial.println("Bienvenido!"); // Bienvenida al mp3
  Serial.println("Este es un mp3 en Arduino Uno!");
  delay(2000);
  Serial.println("Que desea escuchar?");
  delay(2000);
  Serial.println("Toque el numero de la cancion: ");
  delay(2000);
  Serial.println("1. Titanic Theme");
  Serial.println("2. C418 - Sweden");
  Serial.println("3. Harry Potter Theme");
  Serial.println("");
}

void loop()
{
  char key = keypad.getKey(); //configuramos teclado
  if(key) { 
  switch (key)
 {
 case 'A'://Cuando key "A" es oprimida...  
 Serial.println(" SONANDO: Titanic Theme");
 analogWrite(pinred,255); //cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayTitanic(); // suena Titanic
 RepetirMp3(); //Loop
 break;
 case 'B'://Cuando key "B" es oprimida...
 Serial.println(" SONANDO: C418 - Sweden");
 analogWrite(pinred,255);//cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayC14();
 RepetirMp3();
 break;
 case 'C'://Cuando key "C" es oprimida...
 Serial.println(" SONANDO: Harry Potter Theme");
 analogWrite(pinred,255);//cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayHarryPotter();
 RepetirMp3();
 break;
  }
 }
}

void RepetirMp3() { //Funcion para que se repita el mp3
  Serial.println(" La canci√≥n ha terminado!");
  Serial.println(" Cual desea escuchar ahora?");
  Serial.println("Toque el numero de la cancion: ");
  delay(3000);
  Serial.println("1. Titanic Theme");
  Serial.println("2. C418 - Sweden");
  Serial.println("3. Harry Potter Theme");

  char key = keypad.getKey();
  if(key) {
  switch (key)
 {
 case 'A'://Cuando key "A" es oprimida...  
 Serial.println(" SONANDO: Titanic Theme");
 analogWrite(pinred,255);//cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayTitanic();
 break;
 case 'B'://Cuando key "B" es oprimida...
 Serial.println(" SONANDO: C418 - Sweden");
 analogWrite(pinred,255);//cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayC14();
 break;
 case 'C'://Cuando key "C" es oprimida...
 Serial.println(" SONANDO: Harry Potter Theme");
 analogWrite(pinred,255);//cadena de colores rgb
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 analogWrite(pinred,255);
 delay(1000);
 analogWrite(pinred,0);
 analogWrite(pingreen,255);
 delay(1000);
 analogWrite(pingreen,0);
 analogWrite(pinblue,255);
 delay(1000);
 analogWrite(pinblue,0);
 PlayHarryPotter();
 break;
  }
 }

}

void PlayC14() { //exportamos la cancion C014 en formato midi
    tone(tonePin, 195, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 440, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 184, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 110, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    delay(568.181666667);
    tone(tonePin, 293, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 123, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 220, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 195, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 184, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 220, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 220, 2040.12729688);
    delay(2266.80810764);
    delay(5.91855902778);
    delay(568.181666667);
    tone(tonePin, 587, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 493, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 195, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 97, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 220, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 293, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 123, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 220, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    delay(568.181666667);
    tone(tonePin, 440, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 184, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 110, 2040.12729688);
    delay(2266.80810764);
    delay(5.91855902778);
    tone(tonePin, 246, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 440, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 184, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 369, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 246, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 293, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 329, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 440, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    delay(568.181666667);
    tone(tonePin, 587, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 195, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 440, 2040.12729688);
    delay(2266.80810764);
    delay(5.91855902778);
    tone(tonePin, 246, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 493, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 369, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 220, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    delay(568.181666667);
    tone(tonePin, 587, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 246, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 440, 1017.40029687);
    delay(1130.44477431);
    delay(5.91855902778);
    tone(tonePin, 391, 506.036796875);
    delay(562.263107639);
    delay(5.91855902778);
    tone(tonePin, 369, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 440, 250.355046875);
    delay(278.172274306);
    delay(5.91855902778);
    tone(tonePin, 277, 2040.12729688);
    delay(2266.80810764);
}

void PlayTitanic() { //exportamos la cancion de titanic en formato midi
      tone(tonePin, 329, 114.0625);
    delay(126.736111111);
    delay(145.833333333);
    tone(tonePin, 493, 50.0);
    delay(55.5555555556);
    delay(192.708333333);
    tone(tonePin, 659, 35.9375);
    delay(39.9305555556);
    delay(246.527777778);
    tone(tonePin, 277, 239.0625);
    delay(265.625);
    tone(tonePin, 659, 15.625);
    delay(17.3611111111);
    tone(tonePin, 207, 131.25);
    delay(145.833333333);
    delay(123.263888889);
    tone(tonePin, 138, 10.9375);
    delay(12.1527777778);
    tone(tonePin, 659, 192.1875);
    delay(213.541666667);
    delay(60.7638888889);
    tone(tonePin, 493, 185.9375);
    delay(206.597222222);
    delay(38.1944444444);
    delay(8.68055555556);
    delay(92.0138888889);
    delay(225.694444444);
    tone(tonePin, 493, 28.125);
    delay(31.25);
    delay(190.972222222);
    tone(tonePin, 329, 43.75);
    delay(48.6111111111);
    tone(tonePin, 659, 131.25);
    delay(145.833333333);
    delay(104.166666667);
    tone(tonePin, 246, 23.4375);
    delay(26.0416666667);
    tone(tonePin, 184, 462.5);
    delay(513.888888889);
    tone(tonePin, 123, 40.625);
    delay(45.1388888889);
    tone(tonePin, 329, 59.375);
    delay(65.9722222222);
    delay(138.888888889);
    delay(130.208333333);
    tone(tonePin, 659, 4.6875);
    delay(5.20833333333);
    tone(tonePin, 493, 23.4375);
    delay(26.0416666667);
    delay(15.625);
    delay(6.94444444444);
    delay(123.263888889);
    delay(5.20833333333);
    tone(tonePin, 329, 120.3125);
    delay(133.680555556);
    delay(118.055555556);
    delay(1.73611111111);
    tone(tonePin, 493, 32.8125);
    delay(36.4583333333);
    delay(223.958333333);
    tone(tonePin, 329, 56.25);
    delay(62.5);
    tone(tonePin, 659, 18.75);
    delay(20.8333333333);
    delay(175.347222222);
    tone(tonePin, 110, 89.0625);
    delay(98.9583333333);
    tone(tonePin, 220, 75.0);
    delay(83.3333333333);
    tone(tonePin, 164, 342.1875);
    delay(380.208333333);
    tone(tonePin, 659, 192.1875);
    delay(213.541666667);
    delay(32.9861111111);
    tone(tonePin, 493, 20.3125);
    delay(22.5694444444);
    delay(26.0416666667);
    delay(8.68055555556);
    delay(126.736111111);
    tone(tonePin, 329, 210.9375);
    delay(234.375);
    delay(24.3055555556);
    tone(tonePin, 493, 60.9375);
    delay(67.7083333333);
    delay(175.347222222);
    delay(243.055555556);
    delay(8.68055555556);
    tone(tonePin, 246, 20.3125);
    delay(22.5694444444);
    tone(tonePin, 659, 46.875);
    delay(52.0833333333);
    tone(tonePin, 1318, 90.625);
    delay(100.694444444);
    delay(90.2777777778);
    tone(tonePin, 123, 153.125);
    delay(170.138888889);
    delay(64.2361111111);
    delay(1.73611111111);
    tone(tonePin, 246, 15.625);
    delay(17.3611111111);
    tone(tonePin, 622, 29.6875);
    delay(32.9861111111);
    tone(tonePin, 1244, 3.125);
    delay(3.47222222222);
    tone(tonePin, 184, 68.75);
    delay(76.3888888889);
    delay(380.208333333);
    delay(10.4166666667);
    delay(234.375);
    delay(17.3611111111);
    delay(263.888888889);
    tone(tonePin, 493, 12.5);
    delay(13.8888888889);
    tone(tonePin, 329, 195.3125);
    delay(217.013888889);
    delay(32.9861111111);
    tone(tonePin, 659, 9.375);
    delay(10.4166666667);
    delay(250.0);
    tone(tonePin, 277, 7.8125);
    delay(8.68055555556);
    delay(253.472222222);
    tone(tonePin, 659, 15.625);
    delay(17.3611111111);
    tone(tonePin, 277, 142.1875);
    delay(157.986111111);
    tone(tonePin, 207, 21.875);
    delay(24.3055555556);
    delay(43.4027777778);
    tone(tonePin, 138, 56.25);
    delay(62.5);
    tone(tonePin, 659, 178.125);
    delay(197.916666667);
    delay(1.73611111111);
    tone(tonePin, 493, 201.5625);
    delay(223.958333333);
    delay(20.8333333333);
    delay(98.9583333333);
    delay(138.888888889);
    delay(131.944444444);
    tone(tonePin, 493, 1.5625);
    delay(1.73611111111);
    delay(227.430555556);
    tone(tonePin, 659, 137.5);
    delay(152.777777778);
    delay(112.847222222);
    tone(tonePin, 329, 14.0625);
    delay(15.625);
    tone(tonePin, 493, 192.1875);
    delay(213.541666667);
    tone(tonePin, 246, 15.625);
    delay(17.3611111111);
    delay(15.625);
    tone(tonePin, 739, 148.4375);
    delay(164.930555556);
    delay(71.1805555556);
    tone(tonePin, 123, 100.0);
    delay(111.111111111);
    tone(tonePin, 246, 92.1875);
    delay(102.430555556);
    delay(20.8333333333);
    tone(tonePin, 184, 57.8125);
    delay(64.2361111111);
    tone(tonePin, 329, 50.0);
    delay(55.5555555556);
    delay(78.125);
    delay(140.625);
    delay(17.3611111111);
    tone(tonePin, 329, 117.1875);
    delay(130.208333333);
    delay(131.944444444);
    tone(tonePin, 493, 4.6875);
    delay(5.20833333333);
    delay(3.47222222222);
    delay(234.375);
    tone(tonePin, 329, 31.25);
    delay(34.7222222222);
    tone(tonePin, 659, 21.875);
    delay(24.3055555556);
    delay(223.958333333);
    tone(tonePin, 110, 100.0);
    delay(111.111111111);
    delay(392.361111111);
    tone(tonePin, 659, 6.25);
    delay(6.94444444444);
    tone(tonePin, 164, 75.0);
    delay(83.3333333333);
    tone(tonePin, 220, 54.6875);
    delay(60.7638888889);
    tone(tonePin, 493, 53.125);
    delay(59.0277777778);
    delay(34.7222222222);
    tone(tonePin, 329, 115.625);
    delay(128.472222222);
    delay(3.47222222222);
    delay(3.47222222222);
    delay(98.9583333333);
    delay(10.4166666667);
    tone(tonePin, 329, 146.875);
    delay(163.194444444);
    tone(tonePin, 493, 115.625);
    delay(128.472222222);
    delay(1.73611111111);
    delay(5.20833333333);
    delay(286.458333333);
    tone(tonePin, 329, 137.5);
    delay(152.777777778);
    tone(tonePin, 659, 6.25);
    delay(6.94444444444);
    delay(282.986111111);
    tone(tonePin, 246, 51.5625);
    delay(57.2916666667);
    tone(tonePin, 123, 117.1875);
    delay(130.208333333);
    tone(tonePin, 184, 12.5);
    delay(13.8888888889);
    delay(1572.91666667);
    delay(34.7222222222);
    tone(tonePin, 61, 517.1875);
    delay(574.652777778);
    tone(tonePin, 123, 475.0);
    delay(527.777777778);
    tone(tonePin, 659, 295.3125);
    delay(328.125);
    delay(868.055555556);
    delay(15.625);
    delay(13.8888888889);
    delay(152.777777778);
    tone(tonePin, 329, 21.875);
    delay(24.3055555556);
    tone(tonePin, 82, 35.9375);
    delay(39.9305555556);
    tone(tonePin, 123, 153.125);
    delay(170.138888889);
    tone(tonePin, 659, 35.9375);
    delay(39.9305555556);
    delay(8.68055555556);
    tone(tonePin, 164, 103.125);
    delay(114.583333333);
    delay(109.375);
    tone(tonePin, 329, 56.25);
    delay(62.5);
    delay(229.166666667);
    delay(86.8055555556);
    tone(tonePin, 329, 57.8125);
    delay(64.2361111111);
    tone(tonePin, 246, 239.0625);
    delay(265.625);
    delay(371.527777778);
    tone(tonePin, 329, 196.875);
    delay(218.75);
    delay(48.6111111111);
    delay(6.94444444444);
    tone(tonePin, 311, 423.4375);
    delay(470.486111111);
    delay(27.7777777778);
    tone(tonePin, 329, 395.3125);
    delay(439.236111111);
    delay(60.7638888889);
    tone(tonePin, 184, 204.6875);
    delay(227.430555556);
    tone(tonePin, 246, 184.375);
    delay(204.861111111);
    delay(340.277777778);
    tone(tonePin, 329, 9.375);
    delay(10.4166666667);
    delay(31.25);
    delay(125.0);
    tone(tonePin, 311, 75.0);
    delay(83.3333333333);
    delay(190.972222222);
    delay(529.513888889);
    tone(tonePin, 164, 237.5);
    delay(263.888888889);
    tone(tonePin, 277, 15.625);
    delay(17.3611111111);
    tone(tonePin, 220, 145.3125);
    delay(161.458333333);
    tone(tonePin, 329, 292.1875);
    delay(324.652777778);
    delay(29.5138888889);
    tone(tonePin, 369, 71.875);
    delay(79.8611111111);
    delay(15.625);
    delay(1.73611111111);
    delay(154.513888889);
    tone(tonePin, 415, 176.5625);
    delay(196.180555556);
    delay(46.875);
    tone(tonePin, 311, 129.6875);
    delay(144.097222222);
    delay(83.3333333333);
    tone(tonePin, 415, 203.125);
    delay(225.694444444);
    delay(36.4583333333);
    delay(500.0);
    tone(tonePin, 164, 4.6875);
    delay(5.20833333333);
    tone(tonePin, 246, 10.9375);
    delay(12.1527777778);
    tone(tonePin, 311, 40.625);
    delay(45.1388888889);
    tone(tonePin, 369, 118.75);
    delay(131.944444444);
    delay(69.4444444444);
    tone(tonePin, 329, 68.75);
    delay(76.3888888889);
    delay(8.68055555556);
    tone(tonePin, 311, 81.25);
    delay(90.2777777778);
    delay(31.25);
    delay(123.263888889);
    tone(tonePin, 329, 71.875);
    delay(79.8611111111);
    delay(508.680555556);
    tone(tonePin, 329, 17.1875);
    delay(19.0972222222);
    delay(206.597222222);
    tone(tonePin, 246, 135.9375);
    delay(151.041666667);
    tone(tonePin, 329, 240.625);
    delay(267.361111111);
    tone(tonePin, 164, 54.6875);
    delay(60.7638888889);
    delay(41.6666666667);
    delay(236.111111111);
    tone(tonePin, 246, 103.125);
    delay(114.583333333);
    tone(tonePin, 329, 35.9375);
    delay(39.9305555556);
    delay(13.8888888889);
    delay(3.47222222222);
    delay(309.027777778);
    tone(tonePin, 311, 18.75);
    delay(20.8333333333);
    delay(83.3333333333);
}

void PlayHarryPotter() { //exportamos la canci√≥n de Harry Potter formato midi
    tone(tonePin, 493, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 374.999625);
    delay(416.66625);
    tone(tonePin, 783, 124.999875);
    delay(138.88875);
    tone(tonePin, 739, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 499.9995);
    delay(555.555);
    tone(tonePin, 987, 249.99975);
    delay(277.7775);
    tone(tonePin, 880, 749.99925);
    delay(833.3325);
    tone(tonePin, 739, 749.99925);
    delay(833.3325);
    tone(tonePin, 659, 374.999625);
    delay(416.66625);
    tone(tonePin, 783, 124.999875);
    delay(138.88875);
    tone(tonePin, 739, 249.99975);
    delay(277.7775);
    tone(tonePin, 587, 499.9995);
    delay(555.555);
    tone(tonePin, 698, 249.99975);
    delay(277.7775);
    tone(tonePin, 493, 1249.99875);
    delay(1388.8875);
    tone(tonePin, 493, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 374.999625);
    delay(416.66625);
    tone(tonePin, 783, 124.999875);
    delay(138.88875);
    tone(tonePin, 739, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 499.9995);
    delay(555.555);
    tone(tonePin, 987, 249.99975);
    delay(277.7775);
    tone(tonePin, 1174, 499.9995);
    delay(555.555);
    tone(tonePin, 1108, 249.99975);
    delay(277.7775);
    tone(tonePin, 1046, 499.9995);
    delay(555.555);
    tone(tonePin, 830, 249.99975);
    delay(277.7775);
    tone(tonePin, 1046, 374.999625);
    delay(416.66625);
    tone(tonePin, 987, 124.999875);
    delay(138.88875);
    tone(tonePin, 932, 249.99975);
    delay(277.7775);
    tone(tonePin, 739, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 1249.99875);
    delay(1388.8875);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 987, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 987, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 1046, 499.9995);
    delay(555.555);
    tone(tonePin, 987, 249.99975);
    delay(277.7775);
    tone(tonePin, 932, 499.9995);
    delay(555.555);
    tone(tonePin, 739, 249.99975);
    delay(277.7775);
    tone(tonePin, 783, 374.999625);
    delay(416.66625);
    tone(tonePin, 987, 124.999875);
    delay(138.88875);
    tone(tonePin, 932, 249.99975);
    delay(277.7775);
    tone(tonePin, 466, 499.9995);
    delay(555.555);
    tone(tonePin, 493, 249.99975);
    delay(277.7775);
    tone(tonePin, 987, 1249.99875);
    delay(1388.8875);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 987, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 987, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 1174, 499.9995);
    delay(555.555);
    tone(tonePin, 1108, 249.99975);
    delay(277.7775);
    tone(tonePin, 1046, 499.9995);
    delay(555.555);
    tone(tonePin, 830, 249.99975);
    delay(277.7775);
    tone(tonePin, 1046, 374.999625);
    delay(416.66625);
    tone(tonePin, 987, 124.999875);
    delay(138.88875);
    tone(tonePin, 932, 249.99975);
    delay(277.7775);
    tone(tonePin, 739, 499.9995);
    delay(555.555);
    tone(tonePin, 783, 249.99975);
    delay(277.7775);
    tone(tonePin, 659, 1249.99875);
    delay(1388.8875);
}
